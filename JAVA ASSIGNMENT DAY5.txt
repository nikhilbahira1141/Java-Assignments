package devpack;
/*
 * 1) Create a multi-level inheritance , instantiate the child class and 
 * observe constructor invocation.Also show, if needed how will u invoke 
 * parent class constructor from child class ?
 */

class Grandparent
{
	Grandparent(int k)
	{
		System.out.println("in Grandparent class constructor\t"+k);
	}
}
class parent extends Grandparent
{
	parent(int a,int b)
	{
		super(40);
		System.out.println("in parent class constructor\t"+a+"\t"+b);
	}
}
class child extends parent
{
	child(int k)
	{
		super (20,30);
		System.out.println("in child class constructor\t"+k);
	}
}
class Demo
{
	public static void main(String[] args) 
	{
		child s1 =new child(10);
	}
}




package devpack;
/*
 * 2) create a class "Vehicle", define a method "public void start()" in it.
 From this class derive a class FourWheeler. How will u override "start()" method 
 of parent class ?
 */

class vehicle
{ 
	public void start()
	{
		System.out.println("start the vehicle");
	}
}	
class FourWheeler extends vehicle
{
	public void start()
	{
		System.out.println("start FourWheeler");
	}
}
class Demo
{
	public static void main(String[] args) 
	{
		vehicle v1= new FourWheeler();
		v1.start();
	}
}



package devpack;
/*
 * 3) Go for Hierarchical inheritance, create instances of child class and
 *  observe constructor invocation?
 */

class parent
{
	parent(int k)
	{
		System.out.println("in parent class constructor\t"+k);
	}
}

class child1 extends parent
{
	child1()
	{
		super (20);
		System.out.println("in child1 class constructor");
	}
}
class child2 extends parent
{
	child2()
	{
		super (30);
		System.out.println("in child2 class constructor");
	}
}
class Demo
{
	public static void main(String[] args) 
	{
		child1 s1 =new child1();
		System.out.println("***************************************");
		child2 s2 =new child2();
	}
}
 



package devpack;
/*
 * 4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.
*/

class top1
{
	void disp1()
	{
		System.out.println("tpo1");
	}
}
class Bottom1 extends top1
{
	void disp1()
	{
		System.out.println(" in Bottom 1");
	}
}
class Bottom2 extends top1
{
	void disp1()
	{
		System.out.println(" in Bottom 2");
	}
}
class Bottom3 extends top1
{
	void disp1()
	{
		System.out.println(" in Bottom 3");
	}
}
class Demo
{
	static void perform(top1 ref)
	{
		ref.disp1();
	}
	public static void main(String[] args) 
	{
		perform(new Bottom1());
		perform(new Bottom2());
		perform(new Bottom3());
	}
}




/*5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.*/


package devpack;

abstract class Shape {
    public abstract void draw();
}
class Triangle extends Shape {
    public void draw() {
        System.out.println("Drawing a Triangle");
    }
}
class Polygon extends Shape {
    public void draw() {
        System.out.println("Drawing a Polygon");
    }
}
class Circle extends Shape {
    public void draw() {
        System.out.println("Drawing a Circle");
    }
}
public class Demo {
    public static void main(String[] args) {
        Shape[] shapes = new Shape[3];    
       
        shapes[0] = new Triangle();
        shapes[1] = new Polygon();
        shapes[2] = new Circle();
        for (int i=0;i<shapes.length;i++) {
            shapes[i].draw();
        }
    }
}



/*6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.*/


package devpack;

interface A {
    void disp1();
}

interface B extends A {
    void disp2();
}

class C implements B {
   
    public void disp1() {
        System.out.println("disp1() method in class C");
    }

    public void disp2() {
        System.out.println("disp2() method in class C");
    }

    public void extended() {
        System.out.println("extended in class C");
    }
}

public class Demo {
    public static void main(String[] args) {
        C c = new C();
        c.disp1();
        c.disp2();
        
        c.extended();
    }
}


/*7) Define class "Parent1" with some data.
Define interface "Parent2" with some methods.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.*/


package devpack;

class Parent1 {
    private String name;

    public Parent1(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void printName() {
        System.out.println("Name from Parent1: " + name);
    }
}

interface Parent2 {
    void method1();
    void method2();
}

class Child extends Parent1 implements Parent2 {
    public Child(String name) {
        super(name);
    }

    
    public void method1() {
        System.out.println("Method1 from Parent2 implemented in Child");
    }
    public void method2() {
        System.out.println("Method2 from Parent2 implemented in Child");
    }

    public void childownMethod() {
        System.out.println("Child-own method");
    }
}

public class Demo {
    public static void main(String[] args) {
        Child child = new Child("NIKHIL");
        System.out.println("Name: " + child.getName());
        child.printName();
        child.method1();
        child.method2();
        child.childownMethod();
    }
}


/*8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.*/



package devpack;

class base1 {
    private int value;

    public base1(int value) {
        this.value = value;
        System.out.println("base1 parameterized constructor");
    }

    public int getValue() {
        return value;
    }
}

class sub1 extends base1 {

    public sub1(int value) {
        super(value); 
        System.out.println("sub1 one-parameter constructor");
    }

    public sub1(int value1, int value2) {
        super(value1);
        System.out.println("sub1 two-parameter constructor");
    }
}

public class Demo {
    public static void main(String[] args) {
        sub1 s1 = new sub1(100);
        sub1 s2 = new sub1(200);
        sub1 s3 = new sub1(300, 400);
        System.out.println("Value from instance1: " + s1.getValue());
        System.out.println("Value from instance2: " + s2.getValue());
        System.out.println("Value from instance3: " + s3.getValue());
    }
}



/*9) create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.*/



package devpack;

interface Game {
    void play();
}
class Cricket implements Game {
    public void play() {
        System.out.println("Playing Cricket");
    }
}
class Football implements Game {
    public void play() {
        System.out.println("Playing Football");
    }
}

class Tennis implements Game {
    public void play() {
        System.out.println("Playing Tennis");
    }
}

public class Demo {
    public static void perform(Game game) {
        game.play();
    }

    public static void main(String[] args) {
        perform(new Cricket());
        perform(new Football());
        perform(new Tennis());
    }
}



