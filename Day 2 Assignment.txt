1)create a class "Shape" with 2 attributes, "width" and "height". Make sure one can not access these attributes directly.
provide accessor methods on these attributes and allow them to call from outside of your class.


class shape
{
	private int width;
	private int height;

	public int getWidth() {
		return width;
	}
	public void setWidth(int width) {
		this.width = width;
	}
	public int getHeight() {
		return height;
	}
	public void setHeight(int height) {
		this.height = height;
	}	
}
public class Demo
{
	public static void main(String []args)
	{
		shape s1=new shape();
		s1.setWidth(100);
		s1.setHeight(50);
		int area=s1.getHeight()*s1.getWidth();
		System.out.println(area);
	}
}


2) Define a class "MyClass" and make sure clients can instantiate it , 
a) without any argument
b) with one int argument
c) with two int arguments


class myClass
{
	myClass()
	{
		System.out.println("in Default constructer");
	}
	myClass(int num)
	{
		System.out.println("in parameterised constructer");
	}
	myClass(int num1,int num2)
	{
		System.out.println("in 2 parameterised constructer");
	}
}
public class Demo
{
	public static void main(String []args)
	{
		myClass m1=new myClass();
		myClass m2=new myClass(100);
		myClass m3=new myClass(100,200);
	}
}

3) Define a class "Emp" with private static member "int cnt".
How will u make sure that outsiders can read the value of cnt ?


class Emp
{
	private static int cnt=10;
    private int id;
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public static int getCnt() {
		return cnt;
	}

	public static void setCnt(int cnt) {
		Emp.cnt = cnt;
	}
	
}
public class Demo
{
	public static void main(String []args)
	{
		Emp m1=new Emp();
		m1.setId(1);
		System.out.println(Emp.getCnt());
		System.out.println(m1.getId());
	}
}

4) Define a class "DemoOb". 
create an instance of it.
now create a reference and assign the reference created in the above statement.
	Discuss what happens?
Now since u have 2 references, take one of the reference and assign a new instance of the class.
	Discuss what happens?
(For ur discussion, write necessary comments in the program)



class DemoOb
{
    private int id;
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}
}
public class Demo
{
	public static void main(String []args)
	{
		DemoOb ob1=new DemoOb();  // first instance
		ob1.setId(1);			
		System.out.println(ob1.getId());  //ob1=1
		DemoOb ob2=ob1;  // ob2 is a reference to that instance where ob1 is referring to
		System.out.println(ob2.getId());	//ob1=ob2=1
		ob2.setId(2);
		System.out.println(ob2.getId());	//ob2=2
		ob1=new DemoOb();  // here ob1 will refer to a new instance created.
		ob1.setId(1);
		System.out.println(ob1.getId());	//ob1=1
	}
}



5) Define 3 classes A , B and C
in all these classes create static and nonstatic variables as well as methods.
	Now Define a class "Demo" ,in which define "main" function. From this main function try to access all the members of A ,B  and C.


class A
{
	private int num;
	private static int cnt=0;
    public static int getCnt() {
		return cnt;
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
}
class B
{
	private int num;
	private static int cnt=10;
    public static int getCnt() {
		return cnt;
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
}
class C
{
	private int num;
	private static int cnt=100;
    public static int getCnt() {
		return cnt;
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
}
public class Demo
{
	public static void main(String []args)
	{
		A a1=new A();
		B b1=new B();
		C c1=new C();
	a1.setNum(5);
	b1.setNum(25);
	c1.setNum(125);
	
	System.out.println(a1.getNum()+"\t"+A.getCnt());
	System.out.println(b1.getNum()+"\t"+B.getCnt());
	System.out.println(c1.getNum()+"\t"+C.getCnt());
	}
}


6) define static initializers in the above A,B and C classes and check the order of their execution.


package studyopedia;

class A
{
	static
	{
		System.out.println("in A");
	}
	private int num;
	A(int num)
	{
		System.out.println("in A constructo");
		this.num=num;
	}
	public int getNum() {
		return num;
	}
}
class B
{
	static
	{
		System.out.println("in B");
	}
	private int num;
	B(int num)
	{
		System.out.println("in B constuctor");
		this.num=num;
	}
	public int getNum() {
		return num;
	}
}
class C
{
	static
	{
		System.out.println("in C");
	}
	private int num;
	C(int num)
	{
		System.out.println("in C constuctor");
		this.num=num;
	}
	public int getNum() {
		return num;
	}
}
public class Demo
{
	static
	{
		System.out.println("in Demo ");
	}
	public static void main(String []args)
	{
		A a1=new A(10);
		B b1=new B(20);
		C c1=new C(30);
	}
}
