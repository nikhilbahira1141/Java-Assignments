/*
 * Revision_1) Define a class “MyClass”. Define a class “Everything” and define
 * a member function with variable no. of argument inside it. Define a class
 * Demo1 and define main function in it. From main function , call the function
 * of class Everything and make sure you can pass any arguments , it will take
 * and display. It should even take instance of “MyClass” and display.
 */

class MyClass
{
	private int num=400;

	@Override
	public String toString() {
		return "MyClass [num=" + num + "]";
	}

	
}
class Everything
{
	private int num=100;
	public void VarArgs(Object...k)
	{
		for(int i=0;i<k.length;i++ )
		{	
		System.out.println(k[i]);
		}
	}
	@Override
	public String toString() {
		return "Everything [num=" + num + "]";
	}
}
public class Demo
{
	public static void main(String[] args) 
	{
		Everything e=new Everything();
		e.VarArgs(100,"NIKHIL",e,new MyClass());
	}
}



/*
 * Revision_2) Define a class Sample with member variable “char ch” and a
 * parameterized constructor. Create some instances(at least 2) of this class by
 * passing any alphabet. Now achieve following tasks:
 * 
 * a) when you print the reference it should be display the character which was
 * passed during instantiation.
 *  b) if two instances have same character or an
 * alphabet, their "equals()" should return true and obviously "hashCode()" also
 * should be same.
 */

import java.util.Objects;
import java.util.Scanner;

public class Sample
{
	private char ch;

	public Sample(char ch) 
	{
		super();
		this.ch = ch;
	}

	@Override
	public String toString() {
		return "Sample [ch=" + ch + "]";
	}
	
	@Override
	public int hashCode() {
		return Objects.hash(ch);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Sample other = (Sample) obj;
		return ch == other.ch;
	}

	public static void main(String[] args) 
	{
		
		Scanner sc= new Scanner(System.in);
		System.out.println("enter Charecter");
		char c=sc.next().charAt(0);
		Sample S1=new Sample(c);
		System.out.println("enter Charecter");
		char b=sc.next().charAt(0);
		Sample S2=new Sample(b);
		System.out.println(S1);
		System.out.println(S2);
		System.out.println(S1.equals(S2));
		System.out.println(S1.hashCode());
		System.out.println(S2.hashCode());
	}
}



/*
 * Revision_3) create 4 classes A,B,C,D with member functions
 * Afun(),Bfun(),Cfun() and Dfun() respectively. now define "Demo" class with
 * main function. Inside main function create array of Object class which will
 * store instances of above mentioned classes. Traverse through this array and
 * call "Cfun()" of class C only.
 */

class A
{
	public void Afun()
	{
		System.out.println("in A Class");
	}
}
class B
{
	public void Bfun()
	{
		System.out.println("in B Class");
	}
}
class C
{
	public void Cfun()
	{
		System.out.println("in C Class");
	}
}
class D
{
	public void Dfun()
	{
		System.out.println("in D Class");
	}
}
public class Demo
{
	public static void main(String[] args) 
	{
		Object ob1[]=new Object[4];
		ob1[0]=new A();
		ob1[1]=new B();
		ob1[2]=new C();
		ob1[3]=new D();
		
		for(int i=0;i<ob1.length;i++)
		{
			if(ob1[i] instanceof C )
			{
				C c=(C)ob1[i];
				c.Cfun();
				//((C) ob1[i]).Cfun();
			}
		}
	}
}




/*
 * Revision_4) create a parent class "Artist" with a member function
 * "void perform()". now derive following child classes from "Artist"
 * Actor,Singer and Musician and override "perform" in these classes to write
 * the specific task. inside "Actor" class define one more method void
 * changeGateUp() { S.o.p("as per the role demands"); } now create a Demo class
 * with main function. inside main function create array of "Artist" with size
 * 3. store instances of the above child classes in it. Now traverse through the
 * array and invoke "perform" of each child class. In addition to this wherever
 * "Actor" object is there inside the array , also perform "changeGateUp()"
 * method.
 */

class Artist
{
	void perform()
	{
		System.out.println("Artist performing");
	}
} 
class Actor extends Artist
{
	void perform()
	{
		System.out.println("Act");
	}
	void changeGateUp() 
	{
		System.out.println("change costume as per role");
	}
}
class Singer extends Artist
{
	void perform()
	{
		System.out.println("sing");
	}
}
class Musician extends Artist
{
	void perform()
	{
		System.out.println("compose");
	}
}
public class Demo
{
	public static void main(String[] args) 
	{
		Artist A[]=new Artist[3];
		A[0]=new Actor();
		A[1]=new Singer();
		A[2]=new Musician();
		
		for(int i=0;i<A.length;i++)
		{
			A[i].perform();
			if(A[i] instanceof Actor)
			{
			 ((Actor)A[i]).changeGateUp();
			}
		}
	}
}








/*
 * Revision_5) it's a Developer- Client example on a Developer side:
 * 
 * create a checked exception "VotingNotAllowedException".
 * 
 * define a class "Person" with a instance member "private String name" and
 * "private int age" define parameterized constructor and toString() method
 * also. In the parameterized constructor check the age passed while
 * instantiating the class. if the age is less than 18 , constructor should
 * raise "VotingNotAllowedException" [ it should not handle the exception]
 * 
 * create jar file and documentation
 * 
 * 
 * on Client side:
 * 
 * Define a class "Demo" with main function. From main function create an object
 * of "Person" and display that object.
 */



package Dev;
/**
 * 
 */

/**
 * @author NIKHIL
 */
public class VotingNotAllowedException extends Exception
{
	public VotingNotAllowedException(String mess)
	{
		super(mess);
	}
}




/**
 * 
 */
package Dev;

/**
 * 
 */
public class Person 
{
	private String name;
	private int age;
	public Person(String name, int age) throws VotingNotAllowedException
	{
		if(age<18)
		{
			throw new VotingNotAllowedException("NAbalik");
		}
		this.name = name;
		this.age = age;
	}
	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + "]";
	}
	
}


package client;

import Dev.Person;
import Dev.VotingNotAllowedException;

public class Demo {

	public static void main(String[] args) 
	{
		try
		{
		Person p=new Person("NIKHIL",23);
		System.out.println(p);
		}
		catch(VotingNotAllowedException e)
		{
			System.out.println(e);
		}
	}
}




//Revision_6)
//write a program to display the method names inside the class which is passed as a command line argument.



package deeee;

public class Sample
{
	private int k;
	
	void Disp1()
	{
		
	}
	public int getK() {
		return k;
	}
	public void setK(int k) {
		this.k = k;
	}
	void Disp2()
	{
		
	}
}
package deeee;

import java.lang.reflect.Method;


public class Demo 
{
public static void main(String[] args) 
{
	
	Class c =null;
	try 
	{
	c= Class.forName(args[0]);
	}
	catch(ClassNotFoundException ee)
	{
		ee.printStackTrace();
	}
	Method M[]=c.getDeclaredMethods();
	for(int i=0;i<M.length;i++)
	{
		System.out.println(M[i]);
	}
}
}



/*
 * Revision_7) on the developer side create 4 classes [ First,Second,Third and
 * Fourth] with only "toString()" method which should return the respective
 * class name.
 * 
 * create necessary jar file and documentation
 * 
 * 
 * on the client side create a class "Demo" with main function and static Object
 * returnObject(String name) method.
 * 
 * this "returnObject()" method should create the object of the given inside
 * "name" parameter using Reflection API and return it.
 * 
 * from the main function invoke "returnObject()" by passing name of either
 * "First" or "Second" or "Third" or "Fourth" only. Then main function should
 * collect the object given by "returnObject()" method and display it.
 * 
 */

package nick;

public class First 
{

	@Override
	public String toString() 
	{
		return "["+getClass().getName()+"]";
	}

}
package nick;

public class Second 
{
	@Override
	public String toString() 
	{
		return "["+getClass().getName()+"]";
		
	}

}
package nick;

public class Third 
{
	@Override
	public String toString() 
	{
		return "["+getClass().getName()+"]";
		
	}

}






package client;

import java.util.Scanner;

import nick.First;
import nick.Second;
import nick.Third;



public class Demo 
{
static Object createObject(String className) 
{
      Object object = null;
      try {
          Class classDefinition = Class.forName(className);
          object = classDefinition.newInstance();
      } 
	catch (InstantiationException e) // if there is no default constr
	{
          System.out.println(e);
      	} 
	catch (IllegalAccessException e) // if constr is not accessible
	 {
          System.out.println(e);
      	}
	 catch (ClassNotFoundException e)
	 {
          System.out.println(e);
     	 }
      return object;
}
public static void main(String[] args) 
{
	System.out.println("Enter class name which you want to instantiate");
	Scanner sc=new Scanner(System.in);
	String str=sc.next();
	Object ob=createObject(str);
	if(ob instanceof First)
	{
		System.out.println(ob);
	}
	else if(ob instanceof Second)
	{
		System.out.println(ob);
	}
	else if(ob instanceof Third )
	{
		System.out.println(ob);
	}
}
}



